<?xml version="1.0"?>
<!DOCTYPE items [
<!ELEMENT items (item*)>
<!ATTLIST items burpVersion CDATA "">
<!ATTLIST items exportTime CDATA "">
<!ELEMENT item (time, url, host, port, protocol, method, path, extension, request, status, responselength, mimetype, response, comment)>
<!ELEMENT time (#PCDATA)>
<!ELEMENT url (#PCDATA)>
<!ELEMENT host (#PCDATA)>
<!ATTLIST host ip CDATA "">
<!ELEMENT port (#PCDATA)>
<!ELEMENT protocol (#PCDATA)>
<!ELEMENT method (#PCDATA)>
<!ELEMENT path (#PCDATA)>
<!ELEMENT extension (#PCDATA)>
<!ELEMENT request (#PCDATA)>
<!ATTLIST request base64 (true|false) "false">
<!ELEMENT status (#PCDATA)>
<!ELEMENT responselength (#PCDATA)>
<!ELEMENT mimetype (#PCDATA)>
<!ELEMENT response (#PCDATA)>
<!ATTLIST response base64 (true|false) "false">
<!ELEMENT comment (#PCDATA)>
]>
<items burpVersion="2021.10.3" exportTime="Mon Feb 07 19:37:41 EST 2022">
  <item>
    <time>Mon Feb 07 19:08:38 EST 2022</time>
    <url><![CDATA[http://10.10.11.136/?fullName=%27&email=fjhdfhj%40cvh.com&phone=99999999&message=dfhgjhgj]]></url>
    <host ip="10.10.11.136">10.10.11.136</host>
    <port>80</port>
    <protocol>http</protocol>
    <method><![CDATA[GET]]></method>
    <path><![CDATA[/?fullName=%27&email=fjhdfhj%40cvh.com&phone=99999999&message=dfhgjhgj]]></path>
    <extension>null</extension>
    <request base64="true"><![CDATA[R0VUIC8/ZnVsbE5hbWU9JTI3JmVtYWlsPWZqaGRmaGolNDBjdmguY29tJnBob25lPTk5OTk5OTk5Jm1lc3NhZ2U9ZGZoZ2poZ2ogSFRUUC8xLjENCkhvc3Q6IDEwLjEwLjExLjEzNg0KVXNlci1BZ2VudDogTW96aWxsYS81LjAgKFgxMTsgTGludXggeDg2XzY0OyBydjo5MS4wKSBHZWNrby8yMDEwMDEwMSBGaXJlZm94LzkxLjANCkFjY2VwdDogdGV4dC9odG1sLGFwcGxpY2F0aW9uL3hodG1sK3htbCxhcHBsaWNhdGlvbi94bWw7cT0wLjksaW1hZ2Uvd2VicCwqLyo7cT0wLjgNCkFjY2VwdC1MYW5ndWFnZTogZW4tVVMsZW47cT0wLjUNCkFjY2VwdC1FbmNvZGluZzogZ3ppcCwgZGVmbGF0ZQ0KQ29ubmVjdGlvbjogY2xvc2UNClVwZ3JhZGUtSW5zZWN1cmUtUmVxdWVzdHM6IDENCg0K]]></request>
    <status>200</status>
    <responselength>33839</responselength>
    <mimetype>HTML</mimetype>
    <response base64="true"><![CDATA[]]></response>
    <comment></comment>
  </item>
</items>
